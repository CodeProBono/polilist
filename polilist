#!/usr/bin/env python

import sys
import getopt

import providers.base
DEFAULT_PROVIDER = 'softcache'

import parsers.base
active_parsers = {'federal_house_of_representatives':'http://www.aph.gov.au/house/members/mi-alpha.asp'}

from util.notifier import *

USAGE_MESSAGE = """Usage: %s [options]
  [ -d | --debug ]                      Turn on debugging output (equivalent to verbosity level 3).
  [ -? | --help ]                       Display this information and exit.
  [ -p provider | --provider=provider ] Use the specific HTTP provider (default = passthrough).
  [ -v level | --verbosity=level ]      Set the level of verbosity of notifications. 0 = nothing, 1 = default, 2 = detailed, 3 = debug.
""" % sys.argv[0]

def debugPrint(message):
    """
    Print a debugging message.
    """
    sys.stderr.write('DEBUG: %s\n' % message)

def parseArguments(options):
    """
    Parse command line arguments and write the result to the dictionary passed
    in.
    """
    optlist, args = getopt.getopt(sys.argv[1:], 'd?l:p:v:', ['debug', \
        'logfile=', 'help', 'provider=', 'verbosity='])

    if args:
        return False

    for opt in optlist:
        if opt[0] in ['-d', '--debug']:
            options['verbosity'] = DEBUG
        elif opt[0] in ['-?', '--help']:
            sys.stdout.write(USAGE_MESSAGE)
            sys.exit(0)
        elif opt[0] in ['-l', '--logfile']:
            options['log'] = opt[1]
        elif opt[0] in ['-p', '--provider']:
            options['provider'] = opt[1]
        elif opt[0] in ['-v', '--verbosity']:
            try:
                options['verbosity'] = int(opt[1])
            except ValueError:
                return False

    return True

def main():
    # Setup default options.
    opts = { \
        'log'         :None, \
        'provider'    :DEFAULT_PROVIDER, \
        'verbosity'   :INFORMATION \
    }

    # Parse command line arguments.
    if not parseArguments(opts):
        sys.stderr.write(USAGE_MESSAGE)
        return 1

    # Construct the notifier.
    notifier = None
    if opts['log']:
        try:
            f = open(opts['log'], 'w')
            notifier = Notifier(f, f, opts['verbosity'])
        except:
            sys.stderr.write('Failed to open log file %s.\n' % opts['log'])
            sys.exit(1)
    else:
        notifier = Notifier(sys.stdout, sys.stderr, opts['verbosity'])

    # Construct the HTTP provider.
    provider = None
    try:
        provider = providers.base.getProvider(opts['provider'], notifier)
    except Exception as inst:
        notifier.writeError(str(inst), DEBUG)
        notifier.writeError('Could not create %s provider.' \
            % opts['provider'], INFORMATION)
        return 1

    # Enumerate the parsers and retrieve contacts' details.
    for p in active_parsers.keys():
        try:
            parser = parsers.base.getParser(p, provider, notifier)
            parser.get(active_parsers[p])
        except Exception as inst:
            notifier.writeError(str(inst), DEBUG)
            notifier.writeError('Could not create %s parser.' % p, INFORMATION)
            return 1

    if opts['log']:
        try:
            notifier.stdout.close()
        except:
            pass

if __name__ == '__main__':
    main()

